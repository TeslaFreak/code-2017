** HYTECH RACING PROGRAMMING HANDBOOK **
V 1.0 by Andrew Renuart, 6 Aug 2016.
Hopefully this will come in handy. Because it's a HANDbook. Get it?

** Intro **
It's hard to say one thing that summarizes the essence of the programming team, because there is so much to it. The code brings the car to 'life'- without it, it's just a hunk of steel and copper. A really awesome hunk of steel and copper, but nothing useful. Or perhaps it's like glue; it sticks everything in the car together. Motor controller, BMS, driver input... combining them to make a workable car. The iffy metaphors could go on and on. 
But, to start, I'll begin by discussing some of the tools we use, and then I'll discribe the cars of the past and how the programming worked in them.

** Tools **
Here I will go over some of the tools the programming team uses.

*Microcontrollers*

Arduinos, MBEDs, PICs, TI launchpads, and Teensys are all examples of Microcontrollers. Microcontrollers are the bread and butter of any embedded system. Like a microprocessor, they can perform logic operations; math, if statements, for loops. They have storage and RAM built in, so they are already set up to execute code. Unlike a normal computer, though, they can hit the ground running when it comes to interacting with the outside world - digital inputs and outputs, analog-to-digital converters, communication protocols for sensors and other microcontrollers. In a way, they're more powerful than a laptop- have you ever been able to measure a voltage or turn on an LED with a laptop alone? (technically you can if you count the microphone port but just go along with it for a sec). I don't really know what to say about these guys- they're just so awesome. The ones for this year, I believe, can be programmed using the Arduino IDE, so the language is good ol' C. Be thankful we don't live in the 80s and use assembly. 

*Communication*

You need to have a communication protocol to get information around the car. The two big ones are UART Serial and CANBUS.
UART Serial (Univeral Asynchronous Receive and Transmit) is the ultimate in simple communication. You want to send a byte? The voltage goes up for a 1 and down for a 0, 8 times, at a specified speed. If the reciever knows the bits/second speed at which it is being sent, it can read the transmitted byte. The big disadvantage is that you need a set of UART wires between every set of chips you want to communicate with. It's like if you needed a separate set of telephone wires between your house and every other house that you may want to call. Arduinos make it very easy to use and to send several bytes at a time. Not used very much within the car- mostly to commuicate between an Arduino/other microcontroller and a laptop. It was used on the 14-15 car, but wasn't the best choice.
CANBUS (Controller Area Network Bus) (often shortened to just CAN) is way awesomer. I liken this protocol to a crowded room. Imagine, if you will, a room full of people. Alex yells into the room "What is the temperature outside?". Soon after, Brittany yells "How long until the parts are finished milling?". In the next few seconds, several people yell into the room "30!" "29!" "60!" "61!" "30!" "60!". Has anything useful happened? No. Because each message that was produced by a person had data (either a question or an answer), but not an address. Yelling "Nathan, what is the temperature outside?" and a response of "Alex, 30!" would be much more productive in the crowded room where several people can listen and speak. In the CANBUS protocol, each message has an address part and a data part. However, every chip on the CANBUS network shares the same wires throughout the car, so you need the address to make sure you can distinguish useful messages from non-useful ones. The address is 11 bits long (from 0x00 to 0x8FF (0x means hexidecimal)(0 to 2048)). The data is 8 BYTES long, so you can fit a lot in there- 8 chars, 4 ints/shorts, or 2 longs (if ints are shorts, are longs pants?) or floats. The microcontroller will need some help actually interfacing with the CAN wires- we call this chip a "CAN transciever". Probably it will be an MCP 2551 or 2561. Potentially an MCP 2515 will be needed too. The important thing here is to not flood your CANBUS wires- two messages can't be sent at the same time, so if there is not a small break in traffic to send a certain message, some critical information may not get where it needs to go and shut down the car. CANBUS is pretty fast, though, so you'd have to have a couple thousand messages per second to crowd it up that much. Arduino/Teensy has a very good library to use with CANBUS, which is awesome. We kind of invented our own library last year to use with the raspberry pi too.

* GitHub *

This gem is invaluable to keep all of the programming organized. Pull it before every meeting and push it after each one. 

** Old Cars **

* 2013-2014 Car *
"Adele"
This was the car before I joined, so I don't know much about it. I know they used Arduinos, though. Some of the code from this car is buried in the HyTech archives, but I'm not sure if it will be especially useful to you.

* 2014-2015 Car *
"Beyonce" (I think that's what we named it)

This is the car from the year that I joined, so I know quite a bit about the programming side. We used UART for communication this year. If you look over the code from this year, the main arduino is also known as the "rear" arduino. It took in analog signals from the BMS and used PWM to send a command to the motor controller. The dashboard arduino took in messages from the main arduino and displayed them on a screen on the dashboard. In its present form, the code is able to run the car, though it needs help from a laptop to close the relays and it does not comply with the electrical rules. There are also some thermistor arduinos which I don't think we got working either.

* 2015-2016 Car *
Unnamed (for reals, if you do anything different from last year, give the car a name)

I was the programming lead on this car, so of course I know a whole bunch about how it works. This is the first year we used CANBUS, which was extremely helpful. 
To start with, I'll go over the main/EVDC computing load split. Most of the car's processing was split between two microcontrollers- the main arduino and the EVDC (EV Driver Controls). We chose this based partly on a quirk with ordering our motor controller. The main arduino has control over the high voltage relays. However, the EVDC reads the pedals and has control over the motor controller- it tells it how much power to deliver to the motor. So, to coordinate this, the main arduino sends the EVDC a "calm down" message at the beginning, and when it reaches the point in the startup sequence where the motor can be energized, it sends a "go" command to the EVDC. If there is an error, the main arduino sends a "calm down" command to the EVDC.
Now I will explain some of the main code structure. You can also go through the code from last year with extensive commments on the GitHub. First there is the startup sequence- a series of inputs are required by the driver to start the car, pretty much. The first part of the loop is listening for data on the CAN network and loading it into variables. Then, the loop scans for errors. The BMS unit itself handles most of the errors, so the main arduino only has to check for a few things. It also has to compensate for the cockpit BRB press. 
Some extras that we added: A raspberry pi takes in CAN messages and transmits data via bluetooth to a cell phone on the dashboard to display data in a fancy app. Seriously- look at last year's work. It's really cool looking. Lesson: be creative. If you think there's something clever, something unique and hack-y that can be added to the car, suggest and implement it! It's what we at HyTech know as "design points". Have fun with it


** Conclusion **

HyTech is a cool club, and the programming team is a cool team to be on within it. I hope you find it rewarding and fun, and learn from it. Truly, it's almost like having a mini-job while here at school.

Also, please try and convince Jeff/future HyTech president to call it the programming team instead of the "CS" team. It sounds epic-er.
